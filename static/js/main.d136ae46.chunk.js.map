{"version":3,"sources":["data/organizedData.js","components/FormPopup.js","components/EndQuizPopup.js","components/Question.js","components/Answers.js","components/NextButton.js","components/Footer.js","index.js"],"names":["data","responseCode","a","organizedData","map","item","codedQuestion","question","parser","DOMParser","parseFromString","body","textContent","incorrectAnswers","incorrect_answers","correctAnswer","correct_answer","allAnswers","array","i","length","j","Math","floor","random","shuffle","dataItem","answers","answer","answerUsingIndex","findIndex","push","initialState","category","difficulty","questions","reducer","state","field","value","FormPopup","setDataset","useState","categories","setCategories","apiResponseCode","setApiResponseCode","questionsPerCategory","setQuestionsPerCategory","useReducer","dispatch","useEffect","fetch","categoriesResponse","json","categoriesJson","triviaCategories","trivia_categories","onChange","e","target","name","total","easy","medium","hard","className","href","style","display","onSubmit","questionsRounded","round","categoryQuestions","categoryQJSON","categoryQuestionCount","category_question_count","total_question_count","total_easy_question_count","total_medium_question_count","total_hard_question_count","determineQuiz","quiz","results","response_code","newData","preventDefault","fetchingDataset","type","max","min","key","id","EndQuizPopup","restartQuiz","displayPopup","dataset","answeredCorrect","displaying","onClick","Question","currentDataIndex","Answers","handleAnswerClick","NextButton","displayNextButton","handleNextButtonClick","Footer","App","setDisplayPopup","setDisplayNextButton","setCurrentDataIndex","setAnsweredCorrect","window","location","reload","rightClass","document","querySelector","wrongClass","closest","classList","add","querySelectorAll","remove","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d136ae46.chunk.js","sourcesContent":["// This functions gets used in FormPopup and has a file because it shortens FormPopup / has less confusion on what's happening\r\nasync function organizedData(data, responseCode) {\r\n  // Put data into an array with each being an object of it's question, answers, and answerUsingIndex\r\n  const organizedData = [];\r\n  data.map((item) => {\r\n    // Function shuffles the array so answer is not always the 4th option\r\n    function shuffle(array) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\r\n        // swap elements array[i] and array[j] using destructuring syntax\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n    }\r\n\r\n    const codedQuestion = item.question;\r\n    // Decodes the questions with a parser so instead of returning html code for special characters it returns the normal characters\r\n    const parser = new DOMParser();\r\n    const question = parser.parseFromString(codedQuestion, \"text/html\").body\r\n      .textContent;\r\n\r\n    // Get correct & incorrect answers, put into array, shuffle, change to normal characters instead of html special characters with parser\r\n    const incorrectAnswers = item.incorrect_answers;\r\n    const correctAnswer = item.correct_answer;\r\n    const allAnswers = [...incorrectAnswers, correctAnswer];\r\n    shuffle(allAnswers);\r\n    const answers = allAnswers.map((answer) => {\r\n      return parser.parseFromString(answer, \"text/html\").body.textContent;\r\n    });\r\n\r\n    // Use findIndex after shuffle to get index of correct answer to pass as anserUsingIndex\r\n    const answerUsingIndex = allAnswers.findIndex(\r\n      (answer) => answer === correctAnswer\r\n    );\r\n\r\n    // Create object and push into organizedData array, returning dataItem does nothing but take off warning in console\r\n    const dataItem = {\r\n      question,\r\n      answers,\r\n      answerUsingIndex,\r\n    };\r\n    organizedData.push(dataItem);\r\n    return dataItem;\r\n  });\r\n\r\n  // returns array full of objects (^like dataItem being returned above) and responseCode number\r\n  return { organizedData, responseCode };\r\n}\r\n\r\nexport default organizedData;\r\n","import React, { useEffect, useReducer, useState } from \"react\";\r\nimport organizedData from \"../data/organizedData\";\r\n\r\n// useReducer state and dispatch function\r\nconst initialState = {\r\n  category: \"any-category\",\r\n  difficulty: \"any-difficulty\",\r\n  questions: \"10\",\r\n};\r\n\r\nfunction reducer(state, { field, value }) {\r\n  return {\r\n    ...state,\r\n    [field]: value,\r\n  };\r\n}\r\n\r\nfunction FormPopup({ setDataset }) {\r\n  const [categories, setCategories] = useState(null);\r\n  const [apiResponseCode, setApiResponseCode] = useState(null);\r\n  const [questionsPerCategory, setQuestionsPerCategory] = useState(null);\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(() => {\r\n    // useEffect runs this function which fetch's the api and sets the categories in categories state to be used when user decides what Q to have\r\n    async function categories() {\r\n      const categoriesResponse = await fetch(\r\n        \"https://opentdb.com/api_category.php\"\r\n      );\r\n      const categoriesJson = await categoriesResponse.json();\r\n      const triviaCategories = categoriesJson.trivia_categories;\r\n\r\n      setCategories(triviaCategories);\r\n    }\r\n    categories();\r\n  }, []);\r\n\r\n  // Called every time user changes category, amount of questions, and difficulty\r\n  const onChange = (e) => {\r\n    dispatch({ field: e.target.name, value: e.target.value });\r\n  };\r\n\r\n  // Submits the form and fetch's the questions that are going to be used for the quiz, gets amount of questions, category, and difficulty user chose\r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    async function fetchingDataset() {\r\n      const difficulty =\r\n        state.difficulty === \"any-difficulty\"\r\n          ? \"\"\r\n          : `&difficulty=${state.difficulty}`;\r\n      const category =\r\n        state.category === \"any-category\" ? \"\" : `&category=${state.category}`;\r\n\r\n      // Declare early so later can be used in multiple scopes\r\n      let questions, total, easy, medium, hard;\r\n\r\n      // Only runs if a category is specified\r\n      if (category) {\r\n        // In case user types a decimal into the input or negative\r\n        let questionsRounded = Math.round(state.questions);\r\n        const forceAboveZero = questionsRounded <= 0 ? \"10\" : questionsRounded;\r\n        questions = forceAboveZero;\r\n\r\n        // Fetch categories and json them, then shorthand data\r\n        const categoryQuestions = await fetch(\r\n          `https://opentdb.com/api_count.php?${category}`\r\n        );\r\n        const categoryQJSON = await categoryQuestions.json();\r\n        const categoryQuestionCount = categoryQJSON.category_question_count;\r\n\r\n        // Set so it can be used in the switch/case\r\n        total = categoryQuestionCount.total_question_count;\r\n        easy = categoryQuestionCount.total_easy_question_count;\r\n        medium = categoryQuestionCount.total_medium_question_count;\r\n        hard = categoryQuestionCount.total_hard_question_count;\r\n\r\n        // If user asks for too many questions it switches the amount asked for the max amount in the category and difficulty chosen by the user if specified\r\n        // states difficulty is text and each posssibility is a case, code above is #'s in order to set the questions variable to #'s,\r\n        // If user doesn't ask for too many questions, nothing happens, default is no difficulty specified\r\n        switch (state.difficulty) {\r\n          case \"easy\":\r\n            if (questions > easy) {\r\n              questions = easy;\r\n            }\r\n            break;\r\n          case \"medium\":\r\n            if (questions > medium) {\r\n              questions = medium;\r\n            }\r\n            break;\r\n          case \"hard\":\r\n            if (questions > hard) {\r\n              questions = hard;\r\n            }\r\n            break;\r\n          default:\r\n            if (questions > total) {\r\n              questions = total;\r\n            }\r\n            break;\r\n        }\r\n\r\n        // Set the state so it can be used in a return to display # of questions in case api call fails\r\n        setQuestionsPerCategory({\r\n          total: categoryQuestionCount.total_question_count,\r\n          easy: categoryQuestionCount.total_easy_question_count,\r\n          medium: categoryQuestionCount.total_medium_question_count,\r\n          hard: categoryQuestionCount.total_hard_question_count,\r\n        });\r\n      } else {\r\n        // In case user types a decimal into the input or negative\r\n        let questionsRounded = Math.round(state.questions);\r\n        const forceAboveZero = questionsRounded <= 0 ? \"10\" : questionsRounded;\r\n        questions = forceAboveZero;\r\n      }\r\n\r\n      // Fetch's data to determine the quiz\r\n      const determineQuiz = await fetch(\r\n        `https://opentdb.com/api.php?amount=${questions}${difficulty}${category}&type=multiple`\r\n      );\r\n\r\n      const quiz = await determineQuiz.json();\r\n      // Dataset received from the fetch\r\n      const data = quiz.results;\r\n      // Number used to see if api call was succesful or error. Check documentation for possible responses.\r\n      const responseCode = quiz.response_code;\r\n\r\n      // Waits for organizedData which is a function, 2 arguments, shuffles questions, returns responseCode and shuffled answers with index of answer\r\n      const newData = await organizedData(data, responseCode);\r\n      // If error occurs, set state so it returns the correct error page\r\n      if (responseCode !== 0) {\r\n        setApiResponseCode(responseCode);\r\n      }\r\n      // Otherwise call setDataset which is a prop received from index.js to start the quiz\r\n      else {\r\n        setDataset(newData.organizedData);\r\n      }\r\n    }\r\n    fetchingDataset();\r\n  };\r\n\r\n  const { category, difficulty, questions } = state;\r\n\r\n  // When page opens and fetch is happening\r\n  if (categories === null) return <h1>Loading...</h1>;\r\n  // Happens when user asks for too many questions or api fails to retrieve categories and questions\r\n  else if (apiResponseCode) {\r\n    const { total, easy, medium, hard } = questionsPerCategory;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>There was a problem with retrieving the data.</h1>\r\n        <br />\r\n        <p>\r\n          Potential Problems could be api is down or user asked too many\r\n          questions for chosen category\r\n        </p>\r\n        <br />\r\n        <p>There are a total of {total} questions in this category.</p>\r\n        <br />\r\n        <p>{easy} easy questions.</p>\r\n        <br />\r\n        <p>{medium} medium questions.</p>\r\n        <br />\r\n        <p>{hard} hard questions.</p>\r\n        <br />\r\n        <p>\r\n          The amount of questions displayed here could be wrong, if wanting max\r\n          # of questions but doesn't work try lowering the number in your quiz.\r\n        </p>\r\n        <br />\r\n        <p>\r\n          Please click <a href=\"/\">here</a> to refresh the browser and try\r\n          again.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Returns when everything works\r\n  return (\r\n    <div style={{ display: \"flex\" }} className=\"popup-container\">\r\n      <div className=\"container\">\r\n        <div className=\"popup\">\r\n          <div className=\"popup-header\">Welcome To The Quiz</div>\r\n          <div className=\"popup-content\">\r\n            <p>This is a quiz application built using ReactJS.</p>\r\n            <p>Here you decide what your quiz will be about</p>\r\n            <p>It will load question and answer pairs into the component.</p>\r\n            <p>A max of 50 questions can be returned per quiz</p>\r\n            <form className=\"quiz-form\" onSubmit={submitForm}>\r\n              <label className=\"form-question\">\r\n                Select number of questions:\r\n              </label>\r\n              <input\r\n                className=\"form-input\"\r\n                type=\"number\"\r\n                name=\"questions\"\r\n                value={questions}\r\n                onChange={onChange}\r\n                max=\"50\"\r\n                min=\"0\"\r\n              />\r\n\r\n              <label className=\"form-question\">Select a category:</label>\r\n              <select\r\n                className=\"form-input\"\r\n                value={category}\r\n                name=\"category\"\r\n                onChange={onChange}\r\n              >\r\n                <option key=\"0\" value=\"any-category\">\r\n                  Any Category\r\n                </option>\r\n                {categories.map((category) => {\r\n                  return (\r\n                    <option key={category.id} value={category.id}>\r\n                      {category.name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n\r\n              <label className=\"form-question\">Select a difficulty:</label>\r\n              <select\r\n                className=\"form-input\"\r\n                value={difficulty}\r\n                name=\"difficulty\"\r\n                onChange={onChange}\r\n              >\r\n                <option value=\"any-difficulty\">Any Difficulty</option>\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n              </select>\r\n\r\n              <button className=\"button\">Start the quiz</button>\r\n            </form>\r\n\r\n            <br />\r\n            <br />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormPopup;\r\n","import React from \"react\";\r\n\r\nfunction EndQuizPopup({ restartQuiz, displayPopup, dataset, answeredCorrect }) {\r\n  const displaying = displayPopup ? { display: \"flex\" } : { display: \"none\" };\r\n\r\n  return (\r\n    <div style={displaying} className=\"popup-container\">\r\n      <div className=\"container\">\r\n        <div className=\"popup end-popup\">\r\n          <div className=\"popup-header\">Congratulations</div>\r\n          <div className=\"popup-content\">\r\n            <p>You have completed the quiz</p>\r\n            <p>\r\n              {\"You got: \" +\r\n                answeredCorrect +\r\n                \" out of \" +\r\n                dataset.length +\r\n                \" questions right.\"}\r\n            </p>\r\n\r\n            <button className=\"button\" onClick={restartQuiz}>\r\n              Restart\r\n            </button>\r\n            <br />\r\n            <br />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EndQuizPopup;\r\n","import React from \"react\";\r\n\r\nfunction Question({ dataset, currentDataIndex }) {\r\n  return (\r\n    <div className=\"question\">\r\n      <h2>\r\n        Question {currentDataIndex + 1}/{dataset.length}\r\n      </h2>\r\n      <br />\r\n      <p className=\"question-element\">{dataset[currentDataIndex].question}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\nfunction Answers({ dataset, currentDataIndex, handleAnswerClick }) {\r\n  return (\r\n    <div className=\"answers clearfix\">\r\n      <ul>\r\n        <li onClick={handleAnswerClick} className=\"answer-option\" value={0}>\r\n          <div className=\"answer-sidebar\">A</div>\r\n          <div className=\"answer-main\">\r\n            <p>{dataset[currentDataIndex].answers[0]}</p>\r\n          </div>\r\n        </li>\r\n        <li\r\n          onClick={handleAnswerClick}\r\n          className=\"answer-option even-answer\"\r\n          value={1}\r\n        >\r\n          <div className=\"answer-sidebar\">B</div>\r\n          <div className=\"answer-main\">\r\n            <p>{dataset[currentDataIndex].answers[1]}</p>\r\n          </div>\r\n        </li>\r\n        <li onClick={handleAnswerClick} className=\"answer-option\" value={2}>\r\n          <div className=\"answer-sidebar\">C</div>\r\n          <div className=\"answer-main\">\r\n            <p>{dataset[currentDataIndex].answers[2]}</p>\r\n          </div>\r\n        </li>\r\n        <li\r\n          onClick={handleAnswerClick}\r\n          className=\"answer-option even-answer\"\r\n          value={3}\r\n        >\r\n          <div className=\"answer-sidebar\">D</div>\r\n          <div className=\"answer-main\">\r\n            <p>{dataset[currentDataIndex].answers[3]}</p>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Answers;\r\n","import React from \"react\";\r\n\r\nfunction NextButton({\r\n  displayNextButton,\r\n  handleNextButtonClick,\r\n  dataset,\r\n  currentDataIndex,\r\n}) {\r\n  const displaying = displayNextButton\r\n    ? { display: \"flex\" }\r\n    : { display: \"none\" };\r\n\r\n  return (\r\n    <div className=\"next-button-container\">\r\n      <button\r\n        style={displaying}\r\n        className=\"button\"\r\n        onClick={handleNextButtonClick}\r\n      >\r\n        {dataset.length - 1 === currentDataIndex\r\n          ? \"Finish the quiz\"\r\n          : \"Next Question\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NextButton;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p>\r\n        Built using <a href=\"https://reactjs.org/\">react.js</a>\r\n      </p>\r\n      <p>\r\n        Api being used is{\" \"}\r\n        <a href=\"https://opentdb.com/api_config.php\">Open Trivia Database</a>\r\n      </p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport FormPopup from \"./components/FormPopup\";\r\nimport EndQuizPopup from \"./components/EndQuizPopup\";\r\nimport Question from \"./components/Question\";\r\nimport Answers from \"./components/Answers\";\r\nimport NextButton from \"./components/NextButton\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nfunction App() {\r\n  const [displayPopup, setDisplayPopup] = useState(false);\r\n  const [displayNextButton, setDisplayNextButton] = useState(false);\r\n  const [currentDataIndex, setCurrentDataIndex] = useState(0);\r\n  const [answeredCorrect, setAnsweredCorrect] = useState(0);\r\n  const [dataset, setDataset] = useState(null);\r\n\r\n  const restartQuiz = () => {\r\n    window.location.reload(); // restart the application\r\n  };\r\n\r\n  const handleAnswerClick = (e) => {\r\n    // Checks if answer is already chosen\r\n    const rightClass = document.querySelector(\".right\");\r\n    const wrongClass = document.querySelector(\".wrong\");\r\n    if (rightClass || wrongClass) {\r\n      return;\r\n    }\r\n\r\n    // handles answer clicked\r\n    const item = e.target.closest(\"li\");\r\n    const value = item.value;\r\n    const correctAnswer = dataset[currentDataIndex].answerUsingIndex;\r\n\r\n    if (correctAnswer === value) {\r\n      item.classList.add(\"right\");\r\n\r\n      setDisplayNextButton(!displayNextButton);\r\n      setAnsweredCorrect(answeredCorrect + 1);\r\n    } else {\r\n      item.classList.add(\"wrong\");\r\n      // Displays the correct answer\r\n      const list = document.querySelectorAll(\"li\");\r\n      const correct = list[correctAnswer];\r\n      correct.classList.add(\"right\");\r\n\r\n      setDisplayNextButton(!displayNextButton);\r\n    }\r\n  };\r\n\r\n  const handleNextButtonClick = () => {\r\n    // removes class if an element contains that class, if no element contains that class then variable returns null\r\n    const rightClass = document.querySelector(\".right\");\r\n    const wrongClass = document.querySelector(\".wrong\");\r\n    if (wrongClass !== null) wrongClass.classList.remove(\"wrong\");\r\n    if (rightClass !== null) rightClass.classList.remove(\"right\");\r\n\r\n    // handles next button click\r\n    const dataIndexLength = dataset.length - 1;\r\n\r\n    if (dataIndexLength === currentDataIndex) {\r\n      setDisplayPopup(!displayPopup);\r\n    } else {\r\n      setDisplayNextButton(!displayNextButton);\r\n      setCurrentDataIndex(currentDataIndex + 1);\r\n    }\r\n  };\r\n\r\n  // If dataset is null then only display FormPopup so user can choose difficulty, etc of the quiz\r\n  if (dataset === null)\r\n    return (\r\n      <>\r\n        <div className=\"container no-footer-content\">\r\n          <FormPopup setDataset={setDataset} />\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n\r\n  // When dataset is not null then display everything needed to start the test\r\n  return (\r\n    <>\r\n      <div className=\"container no-footer-content\">\r\n        <EndQuizPopup\r\n          restartQuiz={restartQuiz}\r\n          displayPopup={displayPopup}\r\n          dataset={dataset}\r\n          answeredCorrect={answeredCorrect}\r\n        />\r\n        <Question dataset={dataset} currentDataIndex={currentDataIndex} />\r\n        <Answers\r\n          dataset={dataset}\r\n          currentDataIndex={currentDataIndex}\r\n          handleAnswerClick={handleAnswerClick}\r\n        />\r\n        <NextButton\r\n          displayNextButton={displayNextButton}\r\n          handleNextButtonClick={handleNextButtonClick}\r\n          dataset={dataset}\r\n          currentDataIndex={currentDataIndex}\r\n        />\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}